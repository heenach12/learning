def longestPalindrome(s: str) -> str:
    ans = ''
    length = 0

    for i in range(len(s)):
        # Handle odd length strings
        l, r = i, i
        while l >= 0 and r < len(s) and s[l] == s[r]:
            # If the current string length is greater than the saved
            # string length then store the new length and the new string.
            if r - l + 1 > length:
                length = r - l + 1
                ans = s[l:r + 1]

            # Go outwards from the string. l is going to left side
            # and r is going to right side.
            l -= 1
            r += 1

        # Handle even length strings
        l, r = i, i + 1
        while l >= 0 and r < len(s) and s[l] == s[r]:
            # If the current string length is greater than the saved
            # string length then store the new length and the new string.
            if r - l + 1 > length:
                length = r - l + 1
                ans = s[l:r + 1]

            # Go outwards from the string. l is going to left side
            # and r is going to right side.
            l -= 1
            r += 1

    return ans
    # res = ""
    # rlen = 0
    # str_len = len(s)
    # if str_len % 2 == 0:
    #     for i in range(str_len):
    #         l, r = i, i + 1
    #         while (l >= 0 and r < str_len and s[l] == s[r]):
    #             if (r - l + 1) > rlen:
    #                 rlen = r - l + 1
    #                 res = s[l: r + 1]
    #             l -= 1
    #             r += 1
    # else:
    #     for i in range(str_len):
    #         l = i
    #         r = i
    #         while (l >= 0 and r < str_len and s[l] == s[r]):
    #             if (r - l + 1) > rlen:
    #                 rlen = r - l + 1
    #                 res = s[l:r + 1]
    #             l -= 1
    #             r += 1
    # return res

s = "ac"
print(longestPalindrome(s))
