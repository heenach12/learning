from abc import ABC, abstractmethod


class Body(ABC):
    @abstractmethod
    def assembly_engine(self):
        raise NotImplementedError()

    @abstractmethod
    def set_body_type(self):
        raise NotImplementedError()


class Hardware(ABC):
    @abstractmethod
    def put_console(self):
        raise NotImplementedError()

    @abstractmethod
    def assembly_seats(self):
        raise NotImplementedError()


class CarFactory(ABC):

    def get_body(self) -> Body:
        """returns a body instance"""

    def get_hardware(self) -> Hardware:
        """returns a hardware instance"""


class RegularBody(Body):
    def assembly_engine(self):
        print("1.2 Motor")

    def set_body_type(self):
        print("Hatchback")


class SportBody(Body):
    def assembly_engine(self):
        print("2.0 Motor")

    def set_body_type(self):
        print("Sedan")


class StandardHardware(Hardware):
    def put_console(self):
        print("Small screen")

    def assembly_seats(self):
        print("Normal fabric")


class LuxuryHardware(Hardware):
    def put_console(self):
        print("Big Screen")

    def assembly_seats(self):
        print("Luxury Seats")


class FamilyCar(CarFactory):
    def get_body(self) -> Body:
        return RegularBody()

    def get_hardware(self) -> Hardware:
        return StandardHardware()


class OutdoorCar(CarFactory):
    def get_body(self) -> Body:
        return SportBody()

    def get_hardware(self) -> Hardware:
        return StandardHardware()


class BachelorCar(CarFactory):
    def get_body(self) -> Body:
        return RegularBody()

    def get_hardware(self) -> Hardware:
        return LuxuryHardware()


class WealthyCar(CarFactory):
    def get_body(self) -> Body:
        return SportBody()

    def get_hardware(self) -> Hardware:
        return LuxuryHardware()


def prepare_order(customer: str):
    factories = {
        "Family": FamilyCar(),
        "Outdoor": OutdoorCar(),
        "Bachelor": BachelorCar(),
        "Wealthy": WealthyCar()
    }
    car = factories[customer]

    body_car = car.get_body()
    hardware_car = car.get_hardware()

    body_car.assembly_engine()
    body_car.set_body_type()
    hardware_car.put_console()
    hardware_car.assembly_seats()


prepare_order("Family")
